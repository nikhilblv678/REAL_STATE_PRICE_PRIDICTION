# -*- coding: utf-8 -*-
"""REAL_ESTATE_PRICE_PRIDICTION1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tSUJhc7huLXBB0CqmfVo2CsACQOQ9nqk
"""

import pandas as pd
import numpy as np
from google.colab import files
files.upload()

df = pd.read_csv("Real_Estate.csv")

df.head(5)

df.shape

df.info()

df.isnull().sum()

df = pd.read_csv("Real_Estate.csv")

df.describe()

df.drop(columns=["Transaction date"], inplace=True)
df.dropna(inplace=True)

X = df.drop(columns=["House price of unit area"])
y = df["House price of unit area"]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt
import seaborn as sns

lin_reg = LinearRegression()

lin_reg.fit(X_train, y_train)
y_pred_lin = lin_reg.predict(X_test)

def evaluate_and_plot(name, y_true, y_pred):
    print(f"{name} Results:")
    print(f"R2 Score: {r2_score(y_true, y_pred):.4f}")
    print(f"RMSE: {np.sqrt(mean_squared_error(y_true, y_pred)):.2f}")
    print(f"MAE: {mean_absolute_error(y_true, y_pred):.2f}")

def evaluate_and_plot(name, y_true, y_pred):
    print(f"{name} Results:")
    print(f"R2 Score: {r2_score(y_true, y_pred):.4f}")
    print(f"RMSE: {np.sqrt(mean_squared_error(y_true, y_pred)):.2f}")
    print(f"MAE: {mean_absolute_error(y_true, y_pred):.2f}")
    plt.figure(figsize=(6, 4))
    sns.scatterplot(x=y_true, y=y_pred, alpha=0.6)
    plt.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'r--')
    plt.title(f"{name} - Actual vs Predicted")
    plt.xlabel("Actual Price")
    plt.ylabel("Predicted Price")
    plt.tight_layout()
    plt.show()

evaluate_and_plot("Linear Regression", y_test, y_pred_lin)

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

evaluate_and_plot("Random Forest", y_test, y_pred_rf)

from sklearn.ensemble import GradientBoostingRegressor

gb = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
gb.fit(X_train, y_train)
y_pred_gb = gb.predict(X_test)

evaluate_and_plot("Gradient Boosting", y_test, y_pred_gb)

from xgboost import XGBRegressor

xgb = XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, objective='reg:squarederror', random_state=42)
xgb.fit(X_train, y_train)
y_pred_xgb = xgb.predict(X_test)

evaluate_and_plot("XGBoost", y_test, y_pred_xgb)

!pip install gradio

import gradio as gr
model = xgb

def predict_price(age, mrt, stores, lat, lon):
    df_input = pd.DataFrame([[age, mrt, stores, lat, lon]],
                            columns=X.columns)
    prediction = model.predict(df_input)[0]
    return f"üè° Predicted Price: {prediction:.2f} per unit area"

inputs = [
    gr.Number(label="House Age"),
    gr.Number(label="Distance to MRT (meters)"),
    gr.Number(label="Number of Convenience Stores"),
    gr.Number(label="Latitude"),
    gr.Number(label="Longitude"),
]

app = gr.Interface(
    fn=predict_price,
    inputs=inputs,
    outputs="text",
    title="Real Estate Price Predictor",
    description="Enter property details to get the predicted price using ML.",
)

app.launch()



